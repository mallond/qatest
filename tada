{
	"info": {
		"_postman_id": "f528eb4c-22a2-4195-9212-9af8e6afaf33",
		"name": "Working with data files: ramen",
		"description": "This collection is an example of how to [use the Postman Collection Runner alongside CSV or JSON data files](https://www.getpostman.com/docs/v6/postman/collection_runs/starting_a_collection_run). Read more about it in [this blog post](https://wp.me/p5YBMx-127).\n\nWe will run this collection using one of these data files, exported from Google Search Trends about [the volume of searches for \"Ramen\" by city](https://trends.google.com/trends/explore?q=Ramen). ????\n\nIf you don't have these data files, download these examples:\n- [JSON file](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/ramen.json)\n- [CSV file](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/ramen.csv)\n\n### Get Started\n\nTo run a collection in the Postman app, click on the chevron (>) next to the collection's name to expand the details view. Select the blue **Run** button to open the Collection Runner in a new window.\n\n![[collection details](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/ramen-app.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/ramen-app.png)\n\nVerify the collection and environment (if any). Select \"Choose files\", and load the data file in the collection runner. If the data file was loaded successfully, you can preview the values within the Collection Runner.\n\n![[data files preview](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/ramen-preview.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/ramen-preview.png)\n\nThe iteration count can be anything from 1 to 3. If the number of iterations specified is greater than the number of rows in the data file (excluding the column headers), then the collection runner will iterate over the last row's values.\n\nRun the collection by hitting Start. You'll see the collection requests running in sequence and the results of your tests.\n\n![[collection runner running requests](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/ramen-running.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/ramen-running.png)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Example request",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Body contains City\", function () {",
							"    ",
							"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"City\"));",
							"    ",
							"    // older syntax still works too: with dot or bracket notation",
							"    pm.expect(pm.response.text()).to.include(data.City); ",
							"    console.log(\"City to be sent: \" + data[\"City\"]); ",
							"});",
							"",
							"pm.test(\"Body contains number of ramen searches\", function () {",
							"    ",
							"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"Ramen\"));",
							"    pm.expect(pm.response.json())",
							"        .to.have.property(\"args\")",
							"        .that.is.an(\"object\")",
							"        .to.include.keys(\"ramen\");",
							"        ",
							"    console.log(\"Number of ramen searches to be sent: \" + pm.iterationData.get(\"Ramen\"));",
							"    ",
							"});",
							"",
							"pm.test(\"Another way to check if Body contains number of ramen searches\", function () {",
							"    ",
							"    pm.expect(pm.response.json())",
							"        .to.nested.include({",
							"            'args.ramen': JSON.stringify(pm.iterationData.get('Ramen'))",
							"        });",
							"        ",
							"});",
							"",
							"",
							""
						],
						"id": "ea4fdc87-2905-4ea6-8479-7d529f16acbf"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get?city={{City}}&ramen={{Ramen}}",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "city",
							"value": "{{City}}"
						},
						{
							"key": "ramen",
							"value": "{{Ramen}}"
						}
					]
				},
				"description": "For this example, we are borrowing a simple request from [Postman Echo](https://docs.postman-echo.com/). This is Postman's service to test and demonstrate sample API calls from your REST clients. \n\nThis endpoint echoes the HTTP headers, request parameters, and the complete URI requested. We will be sending 2 parameters with our request: `city` and `ramen`. The parameter data will be supplied in the data file that we will upload when using the Postman Collection Runner to run the collection.\n\nUnder the **Tests** tab, write your tests in JavaScript. The example test shown here relies on Postman's `pm.*` API. See more examples under the **Tests** tab in the Postman app.\n\n```\npm.test(\"Body contains City\", function () {\n    \n    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"City\"));\n    \n    // older syntax still works too: with dot or bracket notation\n    pm.expect(pm.response.text()).to.include(data.City); \n    console.log(\"City to be sent: \" + data[\"City\"]); \n});\n\n```"
			},
			"response": [
				{
					"name": "Example response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get?city={{City}}&ramen={{Ramen}}",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "city",
									"value": "{{City}}"
								},
								{
									"key": "ramen",
									"value": "{{Ramen}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "",
							"name": "Access-Control-Allow-Credentials",
							"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "",
							"name": "Access-Control-Allow-Headers",
							"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "",
							"name": "Access-Control-Allow-Methods",
							"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "",
							"name": "Access-Control-Allow-Origin",
							"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "",
							"name": "Access-Control-Expose-Headers",
							"description": "Lets a server whitelist headers that browsers are allowed to access."
						},
						{
							"key": "Connection",
							"value": "keep-alive",
							"name": "Connection",
							"description": "Options that are desired for the connection"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip",
							"name": "Content-Encoding",
							"description": "The type of encoding used on the data."
						},
						{
							"key": "Content-Length",
							"value": "363",
							"name": "Content-Length",
							"description": "The length of the response body in octets (8-bit bytes)"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8",
							"name": "Content-Type",
							"description": "The mime type of this content"
						},
						{
							"key": "Date",
							"value": "Tue, 27 Mar 2018 20:53:44 GMT",
							"name": "Date",
							"description": "The date and time that the message was sent"
						},
						{
							"key": "ETag",
							"value": "W/\"1ed-A+Nb5ErVZvuxR/T6HXF2eg\"",
							"name": "ETag",
							"description": "An identifier for a specific version of a resource, often a message digest"
						},
						{
							"key": "Server",
							"value": "nginx",
							"name": "Server",
							"description": "A name for the server"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding",
							"name": "Vary",
							"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"httpOnly": true,
							"domain": "postman-echo.com",
							"path": "/",
							"secure": false,
							"value": "s%3AAltJ5Ew2w99uJjH9vfQ62TgIOuEmXFTY.jObB3DswbyhRWU566tKnQL5HoNninxDqzhkgCpb%2FcsU",
							"key": "sails.sid"
						}
					],
					"body": "{\"args\":{\"city\":\"{{City}}\",\"ramen\":\"{{Ramen}}\"},\"headers\":{\"host\":\"postman-echo.com\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"cache-control\":\"no-cache\",\"cookie\":\"sails.sid=s%3AAltJ5Ew2w99uJjH9vfQ62TgIOuEmXFTY.jObB3DswbyhRWU566tKnQL5HoNninxDqzhkgCpb%2FcsU\",\"postman-token\":\"7c423993-887a-42db-aa70-ef6f16c631a7\",\"user-agent\":\"PostmanRuntime/7.1.1\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"url\":\"https://postman-echo.com/get?city=%7B%7BCity%7D%7D&ramen=%7B%7BRamen%7D%7D\"}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4d709aa5-d9db-4fba-bd8a-4b29319779dc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "eb254a42-ca7c-452e-abef-4a22918a629b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
